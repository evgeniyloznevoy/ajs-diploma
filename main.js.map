{"version":3,"file":"main.js","mappings":"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","sources":["webpack://ajs-diploma/./src/js/GamePlay.js","webpack://ajs-diploma/./src/js/utils.js","webpack://ajs-diploma/./src/js/characters/Character.js","webpack://ajs-diploma/./src/js/characters/Bowman.js","webpack://ajs-diploma/./src/js/characters/Daemon.js","webpack://ajs-diploma/./src/js/characters/Magician.js","webpack://ajs-diploma/./src/js/characters/Swordsman.js","webpack://ajs-diploma/./src/js/characters/Undead.js","webpack://ajs-diploma/./src/js/characters/Vampire.js","webpack://ajs-diploma/./src/js/PositionedCharacter.js","webpack://ajs-diploma/./src/js/GameState.js","webpack://ajs-diploma/./src/js/themes.js","webpack://ajs-diploma/./src/js/generators.js","webpack://ajs-diploma/./src/js/team.js","webpack://ajs-diploma/./src/js/EnemyTeam.js","webpack://ajs-diploma/./src/js/app.js","webpack://ajs-diploma/./src/js/GameStateService.js","webpack://ajs-diploma/./src/js/GameController.js"],"sourcesContent":["import { calcHealthLevel, calcTileType } from './utils';\r\n\r\nexport default class GamePlay {\r\n  constructor() {\r\n    this.boardSize = 8;\r\n    this.container = null;\r\n    this.boardEl = null;\r\n    this.cells = [];\r\n    this.cellClickListeners = [];\r\n    this.cellEnterListeners = [];\r\n    this.cellLeaveListeners = [];\r\n    this.newGameListeners = [];\r\n    this.saveGameListeners = [];\r\n    this.loadGameListeners = [];\r\n  }\r\n\r\n  bindToDOM(container) {\r\n    if (!(container instanceof HTMLElement)) {\r\n      throw new Error('container is not HTMLElement');\r\n    }\r\n    this.container = container;\r\n  }\r\n\r\n  /**\r\n   * Draws boardEl with specific theme\r\n   *\r\n   * @param theme\r\n   */\r\n  drawUi(theme) {\r\n    this.checkBinding();\r\n\r\n    this.container.innerHTML = `\r\n      <div class=\"controls\">\r\n        <button data-id=\"action-restart\" class=\"btn\">New Game</button>\r\n        <button data-id=\"action-save\" class=\"btn\">Save Game</button>\r\n        <button data-id=\"action-load\" class=\"btn\">Load Game</button>\r\n      </div>\r\n      <div class=\"info\">\r\n        <span data-id=\"level\">LEVEL: 1</span>\r\n        <span data-id=\"score\">SCORE: 0</span>\r\n        <span data-id=\"best-score\">BEST: 0</span>\r\n      </div>\r\n      <div class=\"board-container\">\r\n        <div data-id=\"board\" class=\"board\"></div>\r\n      </div>\r\n    `;\r\n\r\n    this.newGameEl = this.container.querySelector('[data-id=action-restart]');\r\n    this.saveGameEl = this.container.querySelector('[data-id=action-save]');\r\n    this.loadGameEl = this.container.querySelector('[data-id=action-load]');\r\n\r\n    this.newGameEl.addEventListener('click', (event) => this.onNewGameClick(event));\r\n    this.saveGameEl.addEventListener('click', (event) => this.onSaveGameClick(event));\r\n    this.loadGameEl.addEventListener('click', (event) => this.onLoadGameClick(event));\r\n\r\n    this.currentLevel = this.container.querySelector('[data-id=level]');\r\n    this.score = this.container.querySelector('[data-id=score]');\r\n    this.bestScore = this.container.querySelector('[data-id=best-score]');\r\n\r\n    this.boardEl = this.container.querySelector('[data-id=board]');\r\n\r\n    this.boardEl.classList.add(theme);\r\n    for (let i = 0; i < this.boardSize ** 2; i += 1) {\r\n      const cellEl = document.createElement('div');\r\n      cellEl.classList.add('cell', 'map-tile', `map-tile-${calcTileType(i, this.boardSize)}`);\r\n      cellEl.addEventListener('mouseenter', (event) => this.onCellEnter(event));\r\n      cellEl.addEventListener('mouseleave', (event) => this.onCellLeave(event));\r\n      cellEl.addEventListener('click', (event) => this.onCellClick(event));\r\n      this.boardEl.appendChild(cellEl);\r\n    }\r\n\r\n    this.cells = Array.from(this.boardEl.children);\r\n  }\r\n\r\n  /**\r\n   * Draws positions (with chars) on boardEl\r\n   *\r\n   * @param positions array of PositionedCharacter objects\r\n   */\r\n  redrawPositions(positions) {\r\n    for (const cell of this.cells) {\r\n      cell.innerHTML = '';\r\n    }\r\n\r\n    for (const position of positions) {\r\n      const cellEl = this.boardEl.children[position.position];\r\n      const charEl = document.createElement('div');\r\n      charEl.classList.add('character', position.character.type);\r\n\r\n      const healthEl = document.createElement('div');\r\n      healthEl.classList.add('health-level');\r\n\r\n      const healthIndicatorEl = document.createElement('div');\r\n      healthIndicatorEl.classList.add('health-level-indicator', `health-level-indicator-${calcHealthLevel(position.character.health)}`);\r\n      healthIndicatorEl.style.width = `${position.character.health}%`;\r\n      healthEl.appendChild(healthIndicatorEl);\r\n\r\n      charEl.appendChild(healthEl);\r\n      cellEl.appendChild(charEl);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Add listener to mouse enter for cell\r\n   *\r\n   * @param callback\r\n   */\r\n  addCellEnterListener(callback) {\r\n    this.cellEnterListeners.push(callback);\r\n  }\r\n\r\n  /**\r\n   * Add listener to mouse leave for cell\r\n   *\r\n   * @param callback\r\n   */\r\n  addCellLeaveListener(callback) {\r\n    this.cellLeaveListeners.push(callback);\r\n  }\r\n\r\n  /**\r\n   * Add listener to mouse click for cell\r\n   *\r\n   * @param callback\r\n   */\r\n  addCellClickListener(callback) {\r\n    this.cellClickListeners.push(callback);\r\n  }\r\n\r\n  /**\r\n   * Add listener to \"New Game\" button click\r\n   *\r\n   * @param callback\r\n   */\r\n  addNewGameListener(callback) {\r\n    this.newGameListeners.push(callback);\r\n  }\r\n\r\n  /**\r\n   * Add listener to \"Save Game\" button click\r\n   * @param callback\r\n   */\r\n  addSaveGameListener(callback) {\r\n    this.saveGameListeners.push(callback);\r\n  }\r\n\r\n  /**\r\n   * Add listener to \"Load Game\" button click\r\n   *\r\n   * @param callback\r\n   */\r\n  addLoadGameListener(callback) {\r\n    this.loadGameListeners.push(callback);\r\n  }\r\n\r\n  onCellEnter(event) {\r\n    event.preventDefault();\r\n    const index = this.cells.indexOf(event.currentTarget);\r\n    this.cellEnterListeners.forEach((o) => o.call(null, index));\r\n  }\r\n\r\n  onCellLeave(event) {\r\n    event.preventDefault();\r\n    const index = this.cells.indexOf(event.currentTarget);\r\n    this.cellLeaveListeners.forEach((o) => o.call(null, index));\r\n  }\r\n\r\n  onCellClick(event) {\r\n    const index = this.cells.indexOf(event.currentTarget);\r\n    this.cellClickListeners.forEach((o) => o.call(null, index));\r\n  }\r\n\r\n  onNewGameClick(event) {\r\n    event.preventDefault();\r\n    this.newGameListeners.forEach((o) => o.call(null));\r\n  }\r\n\r\n  onSaveGameClick(event) {\r\n    event.preventDefault();\r\n    this.saveGameListeners.forEach((o) => o.call(null));\r\n  }\r\n\r\n  onLoadGameClick(event) {\r\n    event.preventDefault();\r\n    this.loadGameListeners.forEach((o) => o.call(null));\r\n  }\r\n\r\n  static showError(message) {\r\n    alert(message);\r\n  }\r\n\r\n  static showMessage(message) {\r\n    alert(message);\r\n  }\r\n\r\n  selectCell(index, color = 'yellow') {\r\n    this.deselectCell(index);\r\n    this.cells[index].classList.add('selected', `selected-${color}`);\r\n  }\r\n\r\n  deselectCell(index) {\r\n    const cell = this.cells[index];\r\n    cell.classList.remove(...Array.from(cell.classList)\r\n      .filter((o) => o.startsWith('selected')));\r\n  }\r\n\r\n  showCellTooltip(message, index) {\r\n    this.cells[index].title = message;\r\n  }\r\n\r\n  hideCellTooltip(index) {\r\n    this.cells[index].title = '';\r\n  }\r\n\r\n  showDamage(index, damage) {\r\n    return new Promise((resolve) => {\r\n      const cell = this.cells[index];\r\n      const damageEl = document.createElement('span');\r\n      damageEl.textContent = damage;\r\n      damageEl.classList.add('damage');\r\n      cell.appendChild(damageEl);\r\n\r\n      damageEl.addEventListener('animationend', () => {\r\n        cell.removeChild(damageEl);\r\n        resolve();\r\n      });\r\n    });\r\n  }\r\n\r\n  setCursor(cursor) {\r\n    this.boardEl.style.cursor = cursor;\r\n  }\r\n\r\n  checkBinding() {\r\n    if (this.container === null) {\r\n      throw new Error('GamePlay not bind to DOM');\r\n    }\r\n  }\r\n\r\n  // show the current level number on the board\r\n  setLevel(level) {\r\n    this.currentLevel.innerHTML = `LEVEL: ${level + 1}`;\r\n  }\r\n\r\n  // show the current score on the board\r\n  setScore(score) {\r\n    this.score.innerHTML = `SCORE: ${+score.toFixed(2)}`;\r\n  }\r\n\r\n  // show the best score on the board\r\n  setBestScore(score) {\r\n    this.bestScore.innerHTML = `BEST: ${+score.toFixed(2)}`;\r\n  }\r\n}\r\n","export function calcTileType(index, boardSize) {\r\n    if (index % 8 === 0) {\r\n      // first column -> first line\r\n      if (index < boardSize) {\r\n        return 'top-left';\r\n      }\r\n      // first column -> last line\r\n      if (index >= boardSize ** 2 - boardSize) {\r\n        return 'bottom-left';\r\n      }\r\n      // else first column\r\n      return 'left';\r\n    }\r\n  \r\n    if (index % 8 === 7) {\r\n      // last column -> first line\r\n      if (index < boardSize) {\r\n        return 'top-right';\r\n      }\r\n      // last column -> last line\r\n      if (index >= boardSize ** 2 - boardSize) {\r\n        return 'bottom-right';\r\n      }\r\n      // else last column\r\n      return 'right';\r\n    }\r\n  \r\n    // center of first line\r\n    if (index < boardSize) {\r\n      return 'top';\r\n    }\r\n    // center of last line\r\n    if (index >= boardSize ** 2 - boardSize) {\r\n      return 'bottom';\r\n    }\r\n    // all the rest\r\n    return 'center';\r\n  }\r\n  \r\n  export function calcHealthLevel(health) {\r\n    if (health < 15) {\r\n      return 'critical';\r\n    }\r\n  \r\n    if (health < 50) {\r\n      return 'normal';\r\n    }\r\n  \r\n    return 'high';\r\n  }","/**\r\n * Базовый класс, от которого наследуются классы персонажей\r\n * @property level - уровень персонажа, от 1 до 4\r\n * @property attack - показатель атаки\r\n * @property defence - показатель защиты\r\n * @property health - здоровье персонажа\r\n * @property type - строка с одним из допустимых значений:\r\n * swordsman\r\n * bowman\r\n * magician\r\n * daemon\r\n * undead\r\n * vampire\r\n */\r\nexport default class Character {\r\n  constructor(level, type = 'generic') {\r\n    this.level = level;\r\n    this.attack = 0;\r\n    this.defence = 0;\r\n    this.health = 50;\r\n    this.type = type;\r\n\r\n    // 'new Character' in code is prohibited\r\n    if (new.target.name === 'Character') {\r\n      throw new Error('Do not use new Character()');\r\n    }\r\n  }\r\n}\r\n","import Character from './Character';\r\n\r\nexport default class Bowman extends Character {\r\n  constructor(level, type = 'bowman') {\r\n    super(level, type);\r\n    this.attack = 25;\r\n    this.defence = 25;\r\n    this.stepRadius = 2;\r\n    this.attackRadius = 2;\r\n  }\r\n}\r\n","import Character from './Character';\r\n\r\nexport default class Daemon extends Character {\r\n  constructor(level, type = 'daemon') {\r\n    super(level, type);\r\n    this.attack = 10;\r\n    this.defence = 40;\r\n    this.stepRadius = 1;\r\n    this.attackRadius = 4;\r\n  }\r\n}\r\n","import Character from './Character';\r\n\r\nexport default class Magician extends Character {\r\n  constructor(level, type = 'magician') {\r\n    super(level, type);\r\n    this.attack = 10;\r\n    this.defence = 40;\r\n    this.stepRadius = 1;\r\n    this.attackRadius = 4;\r\n  }\r\n}\r\n","import Character from './Character';\r\n\r\nexport default class Swordsman extends Character {\r\n  constructor(level, type = 'swordsman') {\r\n    super(level, type);\r\n    this.attack = 40;\r\n    this.defence = 10;\r\n    this.stepRadius = 4;\r\n    this.attackRadius = 1;\r\n  }\r\n}\r\n","import Character from './Character';\r\n\r\nexport default class Undead extends Character {\r\n  constructor(level, type = 'undead') {\r\n    super(level, type);\r\n    this.attack = 40;\r\n    this.defence = 10;\r\n    this.stepRadius = 4;\r\n    this.attackRadius = 1;\r\n  }\r\n}\r\n","import Character from './Character';\r\n\r\nexport default class Vampire extends Character {\r\n  constructor(level, type = 'vampire') {\r\n    super(level, type);\r\n    this.attack = 25;\r\n    this.defence = 25;\r\n    this.stepRadius = 2;\r\n    this.attackRadius = 2;\r\n  }\r\n}\r\n","import Character from './characters/Character';\r\n\r\nexport default class PositionedCharacter {\r\n  constructor(character, position) {\r\n    if (!(character instanceof Character)) {\r\n      throw new Error('character must be instance of Character or its children');\r\n    }\r\n\r\n    if (typeof position !== 'number') {\r\n      throw new Error('position must be a number');\r\n    }\r\n\r\n    this.character = character;\r\n    this.position = position;\r\n  }\r\n\r\n  // calc possible steps based on current position and step radius\r\n  get stepCells() {\r\n    const boardSize = 8;\r\n    const stepsArray = [this.position];\r\n    const positionLine = this.position % boardSize;\r\n\r\n    // moving around within the board, chosing only horizontals, verticals and diagonals\r\n    for (let i = 1; i <= this.character.stepRadius; i += 1) {\r\n      const top = this.position - boardSize * i;\r\n      const topRight = this.position - boardSize * i + i;\r\n      const right = this.position + 1 * i;\r\n      const bottomRight = this.position + boardSize * i + i;\r\n      const bottom = this.position + boardSize * i;\r\n      const bottomLeft = this.position + boardSize * i - i;\r\n      const left = this.position - 1 * i;\r\n      const topLeft = this.position - boardSize * i - i;\r\n\r\n      // comparison '>= 0' mean top left corner\r\n      // comparison 'boardSize ** 2' mean bottom right corner\r\n      if (top >= 0) {\r\n        stepsArray.push(top);\r\n      }\r\n      if (topRight % boardSize > positionLine && topRight >= 0) {\r\n        stepsArray.push(topRight);\r\n      }\r\n      if (right % boardSize > positionLine && left < boardSize ** 2) {\r\n        stepsArray.push(right);\r\n      }\r\n      if (bottomRight % boardSize > positionLine && bottomRight < boardSize ** 2) {\r\n        stepsArray.push(bottomRight);\r\n      }\r\n      if (bottom < boardSize ** 2) {\r\n        stepsArray.push(bottom);\r\n      }\r\n      if (bottomLeft % boardSize < positionLine && bottomLeft < boardSize ** 2) {\r\n        stepsArray.push(bottomLeft);\r\n      }\r\n      if (left % boardSize < positionLine && left >= 0) {\r\n        stepsArray.push(left);\r\n      }\r\n      if (topLeft % boardSize < positionLine && topLeft >= 0) {\r\n        stepsArray.push(topLeft);\r\n      }\r\n    }\r\n\r\n    return stepsArray;\r\n  }\r\n\r\n  // calc possible attack cells based on current position and attack radius\r\n  get attackCells() {\r\n    const boardSize = 8;\r\n    const attackArray = [];\r\n\r\n    // calc entire area around the char within board size\r\n    const rowStart = Math.floor(this.position / boardSize) - this.character.attackRadius >= 0\r\n      ? Math.floor(this.position / boardSize) - this.character.attackRadius : 0;\r\n    const rowEnd = Math.floor(this.position / boardSize) + this.character.attackRadius < boardSize\r\n      ? Math.floor(this.position / boardSize) + this.character.attackRadius : boardSize - 1;\r\n    const lineStart = (this.position % boardSize) - this.character.attackRadius >= 0\r\n      ? (this.position % boardSize) - this.character.attackRadius : 0;\r\n    const lineEnd = (this.position % boardSize) + this.character.attackRadius < boardSize\r\n      ? (this.position % boardSize) + this.character.attackRadius : boardSize - 1;\r\n\r\n    // moving line by line\r\n    for (let i = rowStart; i <= rowEnd; i += 1) {\r\n      for (let j = lineStart; j <= lineEnd; j += 1) {\r\n        attackArray.push(i * boardSize + j);\r\n      }\r\n    }\r\n    return attackArray;\r\n  }\r\n}\r\n\r\n","import Bowman from './characters/Bowman';\r\nimport Daemon from './characters/Daemon';\r\nimport Magician from './characters/Magician';\r\nimport Swordsman from './characters/Swordsman';\r\nimport Undead from './characters/Undead';\r\nimport Vampire from './characters/Vampire';\r\nimport PositionedCharacter from './PositionedCharacter';\r\n\r\nexport default class GameState {\r\n  constructor(turn, level, score, bestScore, player, enemy) {\r\n    this.turn = turn;\r\n    this.level = level;\r\n    this.score = score;\r\n    this.bestScore = bestScore;\r\n    this.playerTeam = player;\r\n    this.enemyTeam = enemy;\r\n  }\r\n\r\n  // restoring from load object;\r\n  from(object) {\r\n    this.level = object.level;\r\n    this.turn = object.turn;\r\n    this.score = object.score;\r\n    this.bestScore = object.bestScore;\r\n    this.player = [];\r\n    this.enemy = [];\r\n\r\n    // since class names have been lost in JSON, restore them\r\n    for (const anotherOne of object.player) {\r\n      let newChar = 0;\r\n      switch (anotherOne.type) {\r\n        case 'swordsman':\r\n          newChar = new Swordsman(anotherOne.member.character.level);\r\n          break;\r\n        case 'bowman':\r\n          newChar = new Bowman(anotherOne.member.character.level);\r\n          break;\r\n        case 'magician':\r\n          newChar = new Magician(anotherOne.member.character.level);\r\n          break;\r\n        default:\r\n          throw new Error('It is not player classes!');\r\n      }\r\n      // copying stats of each character in new class instance\r\n      for (const stats in anotherOne.member.character) {\r\n        if ({}.hasOwnProperty.call(anotherOne.member.character, stats)) {\r\n          newChar[stats] = anotherOne.member.character[stats];\r\n        }\r\n      }\r\n      this.player.push(\r\n        {\r\n          type: anotherOne.type,\r\n          member: new PositionedCharacter(newChar, anotherOne.member.position),\r\n        },\r\n      );\r\n    }\r\n    // since class names have been lost in JSON, restore them\r\n    for (const anotherOne of object.enemy) {\r\n      let newChar = 0;\r\n      switch (anotherOne.type) {\r\n        case 'vampire':\r\n          newChar = new Vampire(anotherOne.member.character.level);\r\n          break;\r\n        case 'daemon':\r\n          newChar = new Daemon(anotherOne.member.character.level);\r\n          break;\r\n        case 'undead':\r\n          newChar = new Undead(anotherOne.member.character.level);\r\n          break;\r\n        default:\r\n          throw new Error('It is not enemy classes!');\r\n      }\r\n      // copying stats of each character in new class instance\r\n      for (const stats in anotherOne.member.character) {\r\n        if ({}.hasOwnProperty.call(anotherOne.member.character, stats)) {\r\n          newChar[stats] = anotherOne.member.character[stats];\r\n        }\r\n      }\r\n      this.enemy.push(\r\n        {\r\n          type: anotherOne.type,\r\n          member: new PositionedCharacter(newChar, anotherOne.member.position),\r\n        },\r\n      );\r\n    }\r\n  }\r\n\r\n  // saving the type of each player`s character for restoring from JSON\r\n  set playerTeam(positioned) {\r\n    this.player = [];\r\n    for (const member of positioned) {\r\n      this.player.push({ type: member.character.type, member });\r\n    }\r\n  }\r\n\r\n  // clear information of type character from object\r\n  get playerTeam() {\r\n    return this.player.map((anotherOne) => anotherOne.member);\r\n  }\r\n\r\n  // saving the type of each enemy`s character for restoring from JSON\r\n  set enemyTeam(positioned) {\r\n    this.enemy = [];\r\n    for (const member of positioned) {\r\n      this.enemy.push({ type: member.character.type, member });\r\n    }\r\n  }\r\n\r\n  // clear information of type character from object\r\n  get enemyTeam() {\r\n    return this.enemy.map((anotherOne) => anotherOne.member);\r\n  }\r\n}\r\n","const themes = ['prairie', 'desert', 'arctic', 'mountain'];\r\n\r\nexport default themes;","export function* characterGenerator(allowedTypes, maxLevel) {\r\n    // random types of char (0 - allowedTypes.length)\r\n    const rand = Math.floor(Math.random() * allowedTypes.length);\r\n    const genCharacter = Object.create(allowedTypes[rand]);\r\n    // random char`s level (1 - maxLevel)\r\n    genCharacter.level = Math.floor(1 + Math.random() * maxLevel);\r\n    yield genCharacter;\r\n  }\r\n  \r\n  export function generateTeam(allowedTypes, maxLevel, characterCount) {\r\n    const team = [];\r\n    for (let i = 0; i < characterCount; i += 1) {\r\n      team.push(characterGenerator(allowedTypes, maxLevel).next().value);\r\n    }\r\n    return team;\r\n  }\r\n  \r\n  export function* positionGenerator(lines, boardSize) {\r\n    // generate random positions\r\n    if (Math.max(lines) > boardSize - 1) {\r\n      throw new Error('Line`s number greater than board size!');\r\n    }\r\n  \r\n    const allBoard = [...Array(boardSize ** 2).keys()];\r\n\r\n    const positionsArray = allBoard.filter((position) => lines.includes(position % boardSize));\r\n  \r\n    for (let i = positionsArray.length - 1; i > 0; i -= 1) {\r\n      const j = Math.floor(Math.random() * (i + 1));\r\n      [positionsArray[i], positionsArray[j]] = [positionsArray[j], positionsArray[i]];\r\n    }\r\n  \r\n    for (const position of positionsArray) {\r\n      yield position;\r\n    }\r\n  }","import { generateTeam, positionGenerator } from './generators';\r\nimport PositionedCharacter from './PositionedCharacter';\r\nimport Bowman from './characters/Bowman';\r\nimport Swordsman from './characters/Swordsman';\r\nimport Magician from './characters/Magician';\r\n\r\nexport default class Team {\r\n  constructor() {\r\n    this.positioned = [];\r\n    this.allowedTypes = [new Bowman(), new Swordsman()];\r\n    this.startLines = [0, 1];\r\n  }\r\n\r\n  init() {\r\n    // generate first team with 2 chars and level 1 on start lines\r\n    const members = generateTeam(this.allowedTypes, 1, 2);\r\n    const posGenerator = positionGenerator(this.startLines, 8);\r\n    members.forEach((member) => {\r\n      this.positioned.push(new PositionedCharacter(member, posGenerator.next().value));\r\n    });\r\n    return this.positioned;\r\n  }\r\n\r\n  add(positionedCharacter) {\r\n    this.positioned.push(positionedCharacter);\r\n  }\r\n\r\n  levelUp(level) {\r\n    // return chars on its start lines and add a new ones\r\n    const posGenerator = positionGenerator(this.startLines, 8);\r\n\r\n    // up attack and defence for all chars in team\r\n    for (const member of this.positioned) {\r\n      member.character.level += 1;\r\n\r\n      // up only if health > 20%\r\n      member.character.attack = +Math.floor(Math.max(\r\n        member.character.attack,\r\n        member.character.attack * (1.8 - (1 - member.character.health / 100)),\r\n      )).toFixed(2);\r\n      member.character.defence = +Math.floor(Math.max(\r\n        member.character.defence,\r\n        member.character.defence * (1.8 - (1 - member.character.health / 100)),\r\n      )).toFixed(2);\r\n\r\n      // restore health\r\n      member.character.health = member.character.health > 20 ? 100 : member.character.health + 80;\r\n\r\n      member.position = posGenerator.next().value;\r\n    }\r\n\r\n    // add 1 char on second level and 2 chars on the next\r\n    const countChar = level < 3 ? 1 : 2;\r\n    const newMembers = generateTeam([...this.allowedTypes, new Magician()], level - 1, countChar);\r\n    // up attack and defence according to level\r\n    for (const member of newMembers) {\r\n      member.attack = Math.floor(member.attack\r\n         * ((1.8 - (1 - member.health / 100)) ** (member.level - 1)));\r\n      member.defence = Math.floor(member.defence\r\n         * ((1.8 - (1 - member.health / 100)) ** (member.level - 1)));\r\n      this.add(new PositionedCharacter(member, posGenerator.next().value));\r\n    }\r\n  }\r\n}","import Team from './team';\r\nimport { generateTeam, positionGenerator } from './generators';\r\nimport PositionedCharacter from './PositionedCharacter';\r\nimport Daemon from './characters/Daemon';\r\nimport Undead from './characters/Undead';\r\nimport Vampire from './characters/Vampire';\r\n\r\nexport default class EnemyTeam extends Team {\r\n  constructor() {\r\n    super();\r\n    this.allowedTypes = [new Daemon(), new Undead(), new Vampire()];\r\n    this.startLines = [6, 7];\r\n  }\r\n\r\n  // move: attack if can or step\r\n  turn(playerPositioned) {\r\n    if (this.attack(playerPositioned)) {\r\n      return this.attack(playerPositioned);\r\n    }\r\n    this.step(playerPositioned);\r\n    return null;\r\n  }\r\n\r\n  attack(playerPositioned) {\r\n    const canAttack = [];\r\n\r\n    this.positioned.forEach((member) => {\r\n      // find all chars can be attacked\r\n      canAttack.push(playerPositioned.filter(\r\n        (character) => member.attackCells.includes(character.position),\r\n      // calc possible damage for all chars can be attacked\r\n      ).map((attacked) => {\r\n        const damage = Math.max(\r\n          member.character.attack - attacked.character.defence,\r\n          member.character.attack * 0.1,\r\n        );\r\n        return {\r\n          index: member.position,\r\n          attackIndex: attacked.position,\r\n          // calc coef: how many hit to kill it\r\n          coef: attacked.character.health / damage,\r\n        };\r\n      }));\r\n    });\r\n\r\n    // choose the strongest damage\r\n    const bestAttack = [].concat(...canAttack).sort((a, b) => a.coef - b.coef);\r\n    return bestAttack[0];\r\n  }\r\n\r\n  step(playerPositioned) {\r\n    const boardSize = 8;\r\n    const distances = [];\r\n\r\n    // array of possible steps for all chars in enemy team\r\n    this.positioned.forEach((member) => {\r\n      playerPositioned.forEach((character) => {\r\n        distances.push({\r\n          member,\r\n          targetIndex: character.position,\r\n          distance: EnemyTeam.calcSteps(member, character, boardSize),\r\n        });\r\n      });\r\n    });\r\n\r\n    // sort by shortest distance or by attack power if distance is equal\r\n    distances.sort((a, b) => {\r\n      if (a.distance < b.distance) return -1;\r\n      if (a.distance > b.distance) return 1;\r\n      // if distance equal\r\n      if (a.member.character.attack > b.member.character.attack) return -1;\r\n      if (a.member.character.attack < b.member.character.attack) return 1;\r\n      return 0;\r\n    });\r\n\r\n    // calc the best move to target char\r\n    const bestMove = EnemyTeam.bestMove(distances[0].member, distances[0].targetIndex, boardSize);\r\n    for (let i = 0; i < bestMove.length; i += 1) {\r\n      // if there`s no char at the end of path then move or try next best move\r\n      if ([...playerPositioned, ...this.positioned]\r\n        .findIndex((character) => character.position === bestMove[i].stepIndex) < 0) {\r\n        distances[0].member.position = bestMove[i].stepIndex;\r\n        break;\r\n      }\r\n    }\r\n  }\r\n\r\n  static calcSteps(index, target, boardSize) {\r\n    // calc the difference between vertical and horizontal lines for target\r\n    const vertical = Math.abs(\r\n      Math.floor(index.position / boardSize) - Math.floor(target.position / boardSize),\r\n    );\r\n    const horizontal = Math.abs(\r\n      Math.floor(index.position % boardSize) - Math.floor(target.position % boardSize),\r\n    );\r\n    // calc count of steps to enter in attack radius\r\n    const vertSteps = Math.ceil(\r\n      (vertical - index.character.attackRadius) / index.character.stepRadius,\r\n    );\r\n    const horSteps = Math.ceil(\r\n      (horizontal - index.character.attackRadius) / index.character.stepRadius,\r\n    );\r\n    // considering diagonal\r\n    if (vertSteps < horSteps) {\r\n      return horSteps > 0 ? horSteps : 0;\r\n    }\r\n    return vertSteps > 0 ? vertSteps : 0;\r\n  }\r\n\r\n  static bestMove(index, target, boardSize) {\r\n    // calc which of possible steps will be closer to target\r\n    const bestStep = [];\r\n    index.stepCells.forEach((stepIndex) => {\r\n      const vertical = Math.abs(\r\n        Math.floor(stepIndex / boardSize) - Math.floor(target / boardSize),\r\n      );\r\n      const horizontal = Math.abs(\r\n        Math.floor(stepIndex % boardSize) - Math.floor(target % boardSize),\r\n      );\r\n      bestStep.push({ stepIndex, result: vertical + horizontal - index.character.attackRadius });\r\n    });\r\n    return bestStep.sort((a, b) => a.result - b.result);\r\n  }\r\n\r\n  // levelUp() changes the original one in the class prototype\r\n  levelUp(level, countChar) {\r\n    // generate new team\r\n    const posGenerator = positionGenerator(this.startLines, 8);\r\n    const newMembers = generateTeam(this.allowedTypes, level, countChar);\r\n\r\n    // strengthen chars in accordance with level\r\n    for (const member of newMembers) {\r\n      member.attack = Math.floor(member.attack\r\n         * ((1.8 - (1 - member.health / 100)) ** (member.level - 1)));\r\n      member.defence = Math.floor(member.defence\r\n         * ((1.8 - (1 - member.health / 100)) ** (member.level - 1)));\r\n      this.add(new PositionedCharacter(member, posGenerator.next().value));\r\n    }\r\n  }\r\n}\r\n","/**\r\n * Entry point of app: don't change this\r\n */\r\n import GamePlay from './GamePlay';\r\n import GameController from './GameController';\r\n import GameStateService from './GameStateService';\r\n \r\n const gamePlay = new GamePlay();\r\n gamePlay.bindToDOM(document.querySelector('#game-container'));\r\n \r\n const stateService = new GameStateService(localStorage);\r\n \r\n const gameCtrl = new GameController(gamePlay, stateService);\r\n gameCtrl.init();\r\n \r\n // don't write your code here","export default class GameStateService {\r\n  constructor(storage) {\r\n    this.storage = storage;\r\n  }\r\n\r\n  save(state) {\r\n    this.storage.setItem('state', JSON.stringify(state));\r\n  }\r\n\r\n  load() {\r\n    try {\r\n      return JSON.parse(this.storage.getItem('state'));\r\n    } catch (e) {\r\n      throw new Error('Invalid state');\r\n    }\r\n  }\r\n}\r\n","import GamePlay from './GamePlay';\r\nimport GameState from './GameState';\r\nimport themes from './themes';\r\nimport Team from './team';\r\nimport EnemyTeam from './EnemyTeam';\r\n\r\nexport default class GameController {\r\n  constructor(gamePlay, stateService) {\r\n    this.gamePlay = gamePlay;\r\n    this.stateService = stateService;\r\n    this.playerTeam = new Team();\r\n    this.enemyTeam = new EnemyTeam();\r\n    this.selectedCharacter = 0;\r\n  }\r\n\r\n  init() {\r\n    // create first teams and positioning it\r\n    this.playerTeam.init();\r\n    this.enemyTeam.init();\r\n\r\n    // create game state object: (turn, level, score, best score, player team, enemy team);\r\n    const bestScore = this.state !== undefined ? this.state.bestScore : 0;\r\n    this.state = new GameState(\r\n      0, 0, 0, bestScore, this.playerTeam.positioned, this.enemyTeam.positioned,\r\n    );\r\n\r\n    // draw board and characters\r\n    this.gamePlay.drawUi(themes[this.state.level % 4]);\r\n    this.gamePlay.redrawPositions([...this.playerTeam.positioned, ...this.enemyTeam.positioned]);\r\n    this.gamePlay.setBestScore(this.state.bestScore);\r\n\r\n    this.addListeners();\r\n  }\r\n\r\n  addListeners() {\r\n    this.gamePlay.addCellEnterListener(this.onCellEnter.bind(this));\r\n    this.gamePlay.addCellLeaveListener(this.onCellLeave.bind(this));\r\n    this.gamePlay.addCellClickListener(this.onCellClick.bind(this));\r\n    this.gamePlay.addNewGameListener(this.onNewGameClick.bind(this));\r\n    this.gamePlay.addSaveGameListener(this.onSaveGameClick.bind(this));\r\n    this.gamePlay.addLoadGameListener(this.onLoadGameClick.bind(this));\r\n  }\r\n\r\n  onCellClick(index) {\r\n    // only if player turn\r\n    if (this.state.turn === 0) {\r\n      // if char is selected and click on another char from your team -> select teammate\r\n      if (!this.selectedCharacter || this.checkCell(index).action === 'team') {\r\n        const characterOnIndex = this.playerTeam.positioned\r\n          .find((character) => character.position === index);\r\n        if (characterOnIndex !== undefined) {\r\n          if (this.selectedCharacter) {\r\n            this.gamePlay.deselectCell(this.selectedCharacter.position);\r\n          }\r\n          this.gamePlay.selectCell(index);\r\n          this.selectedCharacter = characterOnIndex;\r\n        } else {\r\n          GamePlay.showMessage('Select your warrior!');\r\n        }\r\n      // not allowed move\r\n      } else if (this.checkCell(index).action === 'not') {\r\n        GamePlay.showMessage('This move is not allowed!');\r\n      // step move\r\n      } else if (this.checkCell(index).action === 'step') {\r\n        this.gamePlay.deselectCell(this.selectedCharacter.position);\r\n        this.selectedCharacter.position = index;\r\n        this.changeTurn(index);\r\n      // attack move\r\n      } else if (this.checkCell(index).action === 'attack') {\r\n        const promise = this.attack(this.selectedCharacter.position, index);\r\n        promise.then(() => this.changeTurn(index));\r\n      }\r\n    }\r\n  }\r\n\r\n  onCellEnter(index) {\r\n    // show tooltip for any chars on board\r\n    const characterOnIndex = [...this.playerTeam.positioned, ...this.enemyTeam.positioned]\r\n      .find((character) => character.position === index);\r\n    if (characterOnIndex !== undefined) {\r\n      this.gamePlay.showCellTooltip(`🎖${characterOnIndex.character.level} ⚔${characterOnIndex.character.attack} 🛡${characterOnIndex.character.defence} ❤${+characterOnIndex.character.health.toFixed(2)}`, index);\r\n    }\r\n\r\n    // if some char is selected change selector and cursor for cells when mouseover\r\n    if (this.selectedCharacter) {\r\n      const selector = this.checkCell(index);\r\n      if (selector.color) {\r\n        this.gamePlay.selectCell(index, selector.color);\r\n      }\r\n      this.gamePlay.setCursor(selector.cursor);\r\n    }\r\n  }\r\n\r\n  onCellLeave(index) {\r\n    this.gamePlay.hideCellTooltip(index);\r\n    this.gamePlay.setCursor('auto');\r\n    if (this.selectedCharacter.position !== index) {\r\n      this.gamePlay.deselectCell(index);\r\n    }\r\n  }\r\n\r\n  onNewGameClick() {\r\n    // reset all teams, listeners and create new game\r\n    this.playerTeam.positioned = [];\r\n    this.enemyTeam.positioned = [];\r\n    this.selectedCharacter = 0;\r\n    this.gamePlay.cellClickListeners = [];\r\n    this.gamePlay.cellEnterListeners = [];\r\n    this.gamePlay.cellLeaveListeners = [];\r\n    this.gamePlay.newGameListeners = [];\r\n    this.gamePlay.saveGameListeners = [];\r\n    this.gamePlay.loadGameListeners = [];\r\n    this.init();\r\n  }\r\n\r\n  onSaveGameClick() {\r\n    // convert teams into state object and save game\r\n    this.state.playerTeam = this.playerTeam.positioned;\r\n    this.state.enemyTeam = this.enemyTeam.positioned;\r\n    this.stateService.save(this.state);\r\n    GamePlay.showMessage('Game saved!');\r\n  }\r\n\r\n  onLoadGameClick() {\r\n    try {\r\n      this.state.from(this.stateService.load());\r\n    } catch (e) {\r\n      GamePlay.showError(e.message);\r\n    }\r\n    // conver teams from state object\r\n    this.playerTeam.positioned = this.state.playerTeam;\r\n    this.enemyTeam.positioned = this.state.enemyTeam;\r\n\r\n    // draw board and characters\r\n    this.gamePlay.drawUi(themes[this.state.level % 4]);\r\n    this.gamePlay.redrawPositions([...this.playerTeam.positioned, ...this.enemyTeam.positioned]);\r\n    this.gamePlay.setScore(this.state.score);\r\n    this.gamePlay.setBestScore(this.state.bestScore);\r\n    this.gamePlay.setLevel(this.state.level);\r\n  }\r\n\r\n  checkCell(index) {\r\n    // if character itself on cell\r\n    if (this.selectedCharacter.position === index) {\r\n      return { action: 'self', cursor: 'auto' };\r\n    }\r\n    // if teammate on cell\r\n    if (this.playerTeam.positioned.find((character) => character.position === index)) {\r\n      return { action: 'team', cursor: 'pointer' };\r\n    }\r\n    // if enemy on cell and it possible for attack for selected char\r\n    if (this.selectedCharacter.attackCells.includes(index)\r\n      && this.enemyTeam.positioned.find((character) => character.position === index)) {\r\n      return { action: 'attack', cursor: 'crosshair', color: 'red' };\r\n    }\r\n    // if no enemy on cell and it possible to step on this cell for selected char\r\n    if (this.selectedCharacter.stepCells.includes(index)\r\n    && !this.enemyTeam.positioned.find((character) => character.position === index)) {\r\n      return { action: 'step', cursor: 'pointer', color: 'green' };\r\n    }\r\n    // not allowed for all rest\r\n    return { action: 'not', cursor: 'not-allowed' };\r\n  }\r\n\r\n  attack(index, attackIndex) {\r\n    return new Promise((resolve) => {\r\n      const attacker = [...this.playerTeam.positioned, ...this.enemyTeam.positioned]\r\n        .find((character) => character.position === index);\r\n      const victim = [...this.playerTeam.positioned, ...this.enemyTeam.positioned]\r\n        .find((character) => character.position === attackIndex);\r\n      const damage = Math.max(\r\n        attacker.character.attack - victim.character.defence,\r\n        attacker.character.attack * 0.1,\r\n      );\r\n\r\n      const promise = this.gamePlay.showDamage(attackIndex, damage);\r\n      promise.then(() => {\r\n        victim.character.health -= damage;\r\n\r\n        // kill enemy and remove from team\r\n        if (victim.character.health <= 0) {\r\n          if (this.enemyTeam.positioned.includes(victim)) {\r\n            this.enemyTeam.positioned.splice(this.enemyTeam.positioned.indexOf(victim), 1);\r\n          } else {\r\n            this.playerTeam.positioned.splice(this.playerTeam.positioned.indexOf(victim), 1);\r\n          }\r\n        }\r\n        resolve();\r\n      });\r\n    });\r\n  }\r\n\r\n  changeTurn(index) {\r\n    this.gamePlay.deselectCell(this.selectedCharacter.position);\r\n    this.gamePlay.deselectCell(index);\r\n    this.selectedCharacter = 0;\r\n    this.gamePlay.redrawPositions([...this.playerTeam.positioned, ...this.enemyTeam.positioned]);\r\n\r\n    // if kill all enemy -> next level\r\n    if (this.enemyTeam.positioned.length === 0) {\r\n      this.levelUp();\r\n    } else {\r\n      this.state.turn = 1 - this.state.turn;\r\n    }\r\n\r\n    // if enemyTeam turn\r\n    if (this.state.turn === 1) {\r\n      const enemyAttack = this.enemyTeam.turn(this.playerTeam.positioned);\r\n      // if enemy decided to attack\r\n      if (enemyAttack) {\r\n        // show attacker, target and damage\r\n        this.gamePlay.selectCell(enemyAttack.index);\r\n        this.gamePlay.selectCell(enemyAttack.attackIndex, 'red');\r\n        const promise = this.attack(enemyAttack.index, enemyAttack.attackIndex);\r\n        promise.then(() => {\r\n          this.gamePlay.redrawPositions(\r\n            [...this.playerTeam.positioned, ...this.enemyTeam.positioned],\r\n          );\r\n          this.gamePlay.deselectCell(enemyAttack.index);\r\n          this.gamePlay.deselectCell(enemyAttack.attackIndex);\r\n\r\n          // if kill all players chars\r\n          if (this.playerTeam.positioned.length === 0) {\r\n            GamePlay.showMessage('You died!');\r\n          } else {\r\n            this.state.turn = 1 - this.state.turn;\r\n          }\r\n        });\r\n      // if enemy decided to make a step\r\n      } else {\r\n        this.gamePlay.redrawPositions(\r\n          [...this.playerTeam.positioned, ...this.enemyTeam.positioned],\r\n        );\r\n        this.state.turn = 1 - this.state.turn;\r\n      }\r\n    }\r\n  }\r\n\r\n  levelUp() {\r\n    // change level\r\n    this.state.level += 1;\r\n    this.gamePlay.drawUi(themes[this.state.level % 4]);\r\n\r\n    // renew the score and best score\r\n    this.state.score += this.playerTeam.positioned.reduce(\r\n      (sum, member) => sum + member.character.health, 0,\r\n    );\r\n    if (this.state.bestScore < this.state.score) {\r\n      this.state.bestScore = this.state.score;\r\n    }\r\n    this.gamePlay.setScore(this.state.score);\r\n    this.gamePlay.setBestScore(this.state.bestScore);\r\n    this.gamePlay.setLevel(this.state.level);\r\n\r\n    // up level for player team and create new enemy team\r\n    this.playerTeam.levelUp(this.state.level + 1);\r\n    this.enemyTeam.levelUp(this.state.level + 1, this.playerTeam.positioned.length);\r\n\r\n    this.gamePlay.redrawPositions([...this.playerTeam.positioned, ...this.enemyTeam.positioned]);\r\n  }\r\n}\r\n"],"names":["GamePlay","constructor","this","boardSize","container","boardEl","cells","cellClickListeners","cellEnterListeners","cellLeaveListeners","newGameListeners","saveGameListeners","loadGameListeners","bindToDOM","HTMLElement","Error","drawUi","theme","checkBinding","innerHTML","newGameEl","querySelector","saveGameEl","loadGameEl","addEventListener","event","onNewGameClick","onSaveGameClick","onLoadGameClick","currentLevel","score","bestScore","classList","add","i","cellEl","document","createElement","index","onCellEnter","onCellLeave","onCellClick","appendChild","Array","from","children","redrawPositions","positions","cell","position","charEl","character","type","healthEl","healthIndicatorEl","health","style","width","addCellEnterListener","callback","push","addCellLeaveListener","addCellClickListener","addNewGameListener","addSaveGameListener","addLoadGameListener","preventDefault","indexOf","currentTarget","forEach","o","call","message","alert","selectCell","color","deselectCell","remove","filter","startsWith","showCellTooltip","title","hideCellTooltip","showDamage","damage","Promise","resolve","damageEl","textContent","removeChild","setCursor","cursor","setLevel","level","setScore","toFixed","setBestScore","Character","attack","defence","name","Bowman","super","stepRadius","attackRadius","Daemon","Magician","Swordsman","Undead","Vampire","PositionedCharacter","stepCells","stepsArray","positionLine","top","topRight","right","bottomRight","bottom","bottomLeft","left","topLeft","attackCells","attackArray","rowStart","Math","floor","rowEnd","lineStart","lineEnd","j","GameState","turn","player","enemy","playerTeam","enemyTeam","object","anotherOne","newChar","member","stats","hasOwnProperty","positioned","map","characterGenerator","allowedTypes","maxLevel","rand","random","length","genCharacter","Object","create","generateTeam","characterCount","team","next","value","positionGenerator","lines","max","positionsArray","keys","includes","Team","startLines","init","members","posGenerator","positionedCharacter","levelUp","countChar","newMembers","EnemyTeam","playerPositioned","step","canAttack","attacked","attackIndex","coef","concat","sort","a","b","distances","targetIndex","distance","calcSteps","bestMove","findIndex","stepIndex","target","vertical","abs","horizontal","vertSteps","ceil","horSteps","bestStep","result","gamePlay","stateService","storage","save","state","setItem","JSON","stringify","load","parse","getItem","e","localStorage","gameCtrl","selectedCharacter","undefined","themes","addListeners","bind","checkCell","action","showMessage","changeTurn","then","characterOnIndex","find","selector","showError","attacker","victim","splice","enemyAttack","reduce","sum"],"sourceRoot":""}